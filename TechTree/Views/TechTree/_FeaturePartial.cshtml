@model GameModels.Definitions.Feature

<feature symbol="@Model.Symbol" mode="@Model.Mode">
    <info>
        <name>@Model.Name</name>
        @if (Model.UsesMana || (Model is GameModels.Definitions.ActivatedFeature && ((Model as GameModels.Definitions.ActivatedFeature).CooldownTurns > 0 || (Model as GameModels.Definitions.ActivatedFeature).CooldownTurns > 0)))
        {
            <stats>
                @if (Model is GameModels.Definitions.ActivatedFeature)
                {
                    var a = Model as GameModels.Definitions.ActivatedFeature;
                    if (a.UsesMana)
                    {
                        <mana>@a.ManaCost</mana>
                    }
                    if (a.LimitedUses > 0)
                    {
                        <uses>@a.LimitedUses</uses>
                    }
                    if (a.CooldownTurns > 0)
                    {
                        <cooldown>@a.CooldownTurns</cooldown>
                    }
                }
                @if (Model is GameModels.Definitions.ToggleFeature)
                {
                    var t = Model as GameModels.Definitions.ToggleFeature;
                    if (t.UsesMana)
                    {
                        <mana>@(t.ActivateManaCost > 0 ? t.ActivateManaCost : 0) to activate, @(t.ManaCostPerTurn > 0 ? t.ManaCostPerTurn : 0) per turn</mana>
                    }
                }
            </stats>
        }
        @if (Model is GameModels.Definitions.Features.Build || Model is GameModels.Definitions.Features.PerformResearch)
        {
            var p = (Model is GameModels.Definitions.Features.Build) ? (Model as GameModels.Definitions.Features.Build).Unit as GameModels.Definitions.Purchasable : (Model as GameModels.Definitions.Features.PerformResearch).Research as GameModels.Definitions.Purchasable;
            <cost>
                @if (p.MineralCost != 0)
                {
                    <minerals>@p.MineralCost</minerals>
                }
                @if (p.VespineCost!= 0)
                {
                    <vespine>@p.VespineCost</vespine>
                }
                @if (p.SupplyCost != 0)
                {
                    <supply class="@(p.SupplyCost < 0 ? "positive" : null)">@Math.Abs(p.SupplyCost)</supply>
                }
                <time>@p.BuildTime</time>
            </cost>
        }
        @if (@Model.UnlockedBy != null)
        {
            <unlocked>@Model.UnlockedBy.PerformedAt.Name</unlocked>
        }
        <description>@Model.GetDescription()</description>
    </info>
</feature> 